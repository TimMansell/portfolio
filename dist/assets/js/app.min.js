'use strict';

// Some variables.
var appConfig = {
	breakpoints: {
		xs: 767,
		sm: 991,
		md: 1199
	}
};

// Init app with dependencies.
(function() {
	angular
		.module('TM', ['duScroll'])
  		.config(['$locationProvider', function ($locationProvider) {
  	}]);
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmCarousel', tmCarousel);

    function tmCarousel() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var autoplay = (attrs.autoplay) ? true : false,
            speed =  (attrs.speed) ? attrs.speed : 3000;

        element.slick({
          autoplay: autoplay,
          autoplaySpeed: speed,
          adaptiveHeight: true
        });        
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmCenterContent', tmCenterContent);

    function tmCenterContent() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $window = angular.element(window),
            $container = (attrs.element) ? element.find(attrs.element) : element.children()[0];
        
        function positionContainer() {
          $container.css('top', ( ( element.height() - $container.height() - 20 ) / 2) + 'px' );
        }

        $window.on('resize', function(){ 
          positionContainer();  
        });

        // Init.
        positionContainer();
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmLazyLoad', tmLazyLoad);

    function tmLazyLoad() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var autoplay = (attrs.autoplay) ? true : false,
            speed =  (attrs.speed) ? attrs.speed : 3000;

        element.slick({
          autoplay: autoplay,
          autoplaySpeed: speed
        });        
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmScrollFade', tmScrollFade);

    function tmScrollFade() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $window = angular.element(window),
            opacity;

        $window.on('scroll', function(e){
          opacity = 1 - ($window.scrollTop() / $window.height()) * 1.15;

          if (opacity >= 0){
            element.css('opacity', opacity);
          }
        });    
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmScrollBlur', tmScrollBlur);

    function tmScrollBlur() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $window = angular.element(window),
            blurFrom = (attrs.blurFrom) ? parseInt(attrs.blurFrom) : 0,
            blurTo = (attrs.blurTo) ? parseInt(attrs.blurTo) : 10;

        
        // Blur on scroll
        $window.on('scroll', function(e){
          blur = blurFrom + ( (blurTo - blurFrom) * ($window.scrollTop() / $window.height()));

          if(blur <= blurTo){
            element.css({
              '-webkit-filter': 'blur('+blur+'px)',
              'filter': 'blur('+blur+'px)'
            });
          }
        });    
      }
    }
})();

(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmShuffleContent', tmShuffleContent);

    tmShuffleContent.$inject = ['$interval'];

    function tmShuffleContent($interval) {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $elements = element.children(),
            elementsArray = $elements.toArray(),
            containerHeight = element.height();

        // Set height of container.
        element.height(containerHeight);

        $interval(function(){
          $elements.hide();            
          shuffle();
        }, 4000);

        // Shuffle text.
        function shuffle(){
          angular.element(elementsArray[0]).show().shuffleLetters();

          elementsArray.push(elementsArray.shift());
        }

        // Init.
        shuffle(); 
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmNavigation', tmNavigation);

    function tmNavigation() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $window = angular.element(window),
            elementFromTop = element.offset().top,
            showFromBottom = (attrs.showFromBottom) ? attrs.showFromBottom : 50;

        // Calculate on scroll
        $window.on('scroll', function(){

          // We have scrolled to the element, now do your stuff!
          if($window.scrollTop() >= elementFromTop){
            element.addClass('navigation-menu-is-sticky');
          } else {
            element.removeClass('navigation-menu-is-sticky');
          }
        });
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmDate', tmDate);

    tmDate.$inject = ['$filter'];

    function tmDate($filter) {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        element.html($filter('date')(new Date(), 'yyyy'));
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmShuffleOnScreen', tmShuffleOnScreen);

    function tmShuffleOnScreen() {
      var directive = {
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $window = angular.element(window),
            windowHasScrolled = 0,
            elementFromScreen = 0,
            elementHasShuffled = false,
            showFromBottom = (attrs.showFromBottom) ? attrs.showFromBottom : 50;

        // Set height so element keeps it's height when text dissapears.
        element.css('height', element.height());

        // Calculate on scroll
        $window.on('scroll', function(){
          windowHasScrolled = $window.scrollTop() + $window.height();
          elementFromScreen = element.offset().top;

          // We have scrolled to the element, now do your stuff!
          if(windowHasScrolled >= (elementFromScreen + showFromBottom) && elementHasShuffled === false){
            element.shuffleLetters();    

            // We've shuffled once so turn off.
            elementHasShuffled = !elementHasShuffled;
          }
        });
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmRandomNumbersOnScreen', tmRandomNumbersOnScreen);

    tmRandomNumbersOnScreen.$inject = ['$timeout', '$filter'];

    function tmRandomNumbersOnScreen($timeout, $filter) {
      var directive = {
        scope: {},
        link: link,
        restrict: 'EA'
      };
      return directive;

      function link(scope, element, attrs) {
        var $window = angular.element(window),
            windowHasScrolled = 0,
            elementFromScreen = 0,
            elementHasCounted = false,
            showFromBottom = (attrs.showFromBottom) ? attrs.showFromBottom : 150;

        // Set height so element keeps it's height when text dissapears.
        element.css('height', element.height());

        // Calculate on scroll
        $window.on('scroll', function(){
          windowHasScrolled = $window.scrollTop() + $window.height();
          elementFromScreen = element.offset().top;

          // We have scrolled to the element, now do your stuff!
          if(windowHasScrolled >= (elementFromScreen + showFromBottom) && elementHasCounted === false){
            countTo();  

            // We've shuffled once so turn off.
            elementHasCounted = !elementHasCounted;
          }
        });

        function countTo(){
          var num = 0,
              refreshInterval = 30,
              step = 0,
              maxCount = (attrs.maxCount) ? attrs.maxCount : 5000,
              minCount = (attrs.minCount) ? attrs.minCount : 850,
              appendChar = (attrs.appendCharacter) ? attrs.appendCharacter: '',
              countTo = Math.floor(Math.random()*(maxCount-minCount+1)+minCount),
              duration = 5000,
              startValue = 0,
              steps,
              value,
              increment;

          var calculate = function () {
              steps = Math.ceil(duration / refreshInterval);
              increment = ((countTo - startValue) / steps);
              num = startValue;
          };

          var tick = function () {
              $timeout(function () {
                num += increment;
                step++;

                if (step >= steps) {
                    num = countTo;

                    element.html($filter('number')(countTo, 0) + appendChar);
                } else {

                    element.html($filter('number')(num, 0) + appendChar);
                    tick();
                }
              }, refreshInterval);
          };

          calculate();
          tick();
        }
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmPortfolio', tmPortfolio);

    function tmPortfolio() {
      var directive = {
        link: link,
        templateUrl: 'assets/templates/portfolio.html',
        restrict: 'EA',
        controller: portfolioController,
        controllerAs: 'pf',
        bindToController: true
      };
      return directive;

      function link(scope, element, attrs) {
        
      }

      portfolioController.$inject = ['$scope', 'portfolioService'];

      function portfolioController($scope, portfolioService) {
        var pf = this;
            
        pf.items = [];
         
        init();

        ////////////

        function init() {
            return portfolioService.get().then(function(data) {
                pf.items = data;

                return pf.items;
            });
        }
      }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .directive('tmSocialIcons', tmSocialIcons);

    function tmSocialIcons() {
      var directive = {
        link: link,
        templateUrl: 'assets/templates/social-icons.html',
        restrict: 'EA',
        // controller: portfolioController,
        // controllerAs: 'pf',
        // bindToController: true
      };
      return directive;

      function link(scope, element, attrs) {
        
      }

      // portfolioController.$inject = ['$scope', 'portfolioService'];

      // function portfolioController($scope, portfolioService) {
      //   var pf = this;
            
      //   pf.items = [];
         
      //   init();

      //   ////////////

      //   function init() {
      //       return portfolioService.get().then(function(data) {
      //           pf.items = data;

      //           return pf.items;
      //       });
      //   }
      // }
    }
})();
(function() {
    'use strict';

    angular
        .module('TM')
        .factory('portfolioService', portfolioService);

    portfolioService.$inject = ['$http'];

    function portfolioService($http) {
	    var service = {
	        get: get
	    };

	    return service;

	    function get(){
        	return $http.get('assets/json/portfolio.json')
	            .then(success)
	            .catch(failed);

	        function success(response) {
	            return response.data;
	        }

	        function failed(error) {
	            //logger.error('XHR Failed for getAvengers.' + error.data);
	        }
	    }
	}
})();