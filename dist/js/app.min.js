'use strict';

// Some variables.
var appConfig = {
	breakpoints: {
		xs: 767,
		sm: 991,
		md: 1199
	}
};

// Init app with dependencies.
angular.module('TM', ['TM.directives'])
  .config(['$locationProvider', function ($locationProvider) {
  }]);

// Namespacing.
angular.module('TM.directives', []);
'use strict';

/* Directives */
angular.module('TM.directives')
  .directive('tmLazyLoad', [function () { // Lazy load images.
      return {
          restrict: 'A',
          link: function (scope, element, attrs) {
              /*element.show().lazyload({
                  effect: "fadeIn",
                  threshold: 250,
                  skip_invisible: true
              });*/
          }
      };
  }])
  .directive('tmCenterContent', [function () { // Center content in a container.
      return {
          restrict: 'A',
          link: function (scope, element, attrs) {
            var $window = angular.element(window),
                $container = element.find('.container');
            
            function positionContainer() {
              $container.css( 'top', ( ( element.height() - $container.height() - 20 ) / 2) + 'px' );
            }

            $window.on('resize', function(){ 
              positionContainer();  

              console.log('dfas');
            });

            // Init.
            positionContainer(); // On ready, resize intro
          }
      };
  }])
  .directive('tmCarousel', [function () { // Carousel.
      return {
          restrict: 'A',
          link: function (scope, element, attrs) {

              /*element.bxSlider({
                  controls: false,
                  auto: true,
                  useCSS: false,
                  pause: 5000
              });*/
          }
      };
  }]);

'use strict';

/* Directives */
angular.module('TM.directives')
  .directive('tmNavigation', [function () { // Navigation stuff.
    return {
      restrict: 'A',
      link: function (scope, element, attrs) {
        var $window = angular.element(window);

        // Stick Navigation.
        element.stickyNavbar({
          mobileWidth: appConfig.breakpoints.xs,
          stickyModeClass: 'is-sticky'
          //startAt: 500
        });

        /*element.find('ul').onePageNav({
          scrollSpeed: 400 
        });*/

        /*$window.on('scroll', function(){
          if($window.scrollTop() < $window.height()/2) {
            element.find('li').removeClass('current');
            //element.
            //scope.
          }
        });

        $window.on('resize', function(e){ 
          console.log('e', e);
          if(e.target.innerWidth > appConfig.breakpoints.xs){

          }
        });*/
      }
    };
  }]);
